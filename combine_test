#!/usr/bin/env python
import optparse
import glob
import os
import string
import nltk
import math
import re
import sys
import random
from collections import Counter, defaultdict # multiset represented by dictionary

scorenum = 11
pennum = 10
modnum = 2

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data-dir", dest="data", default="test_eval/", help="Directory containing system outputs")
(opts,_) = optparser.parse_args()
(source, reference) = (opts.data + "/source", opts.data + "/reference")

def score(params):

    score_w = params[0:scorenum]
    penalty_w = params[scorenum:scorenum + pennum]
    pre_w = params[scorenum + pennum:]
    final = defaultdict(float)

    for (filenum, f) in enumerate(glob.glob(opts.data + '/*')):
        ptr = open(f)
        for full_line in ptr:
            line = full_line.split()
            if len(line) == 0: continue
            name = line[0]
            score_p = line[1:1 + scorenum]
            penalty_p = line[1 + scorenum:]
            score = 1.0
            for (i, sc) in enumerate(score_p):
                score += float(sc) * score_w[i]
            penalty = 1.0
            for (i, pe) in enumerate(penalty_p):
                penalty *= pow(float(pe), penalty_w[i])
            final[name] += pre_w[filenum] * score * penalty

    distance = 0.0
    solution = sorted(final.keys(), key = lambda x: -final[x])
    return solution

params = [0.04025261756346482, 0.09462571034550415, 0.059666474844190326, 0.0903883722917184, -0.13910823600177716, -0.0533806995505888, 0.10381636061813915, -0.0175520153668961, -0.13960621991476602, 0.011510352223363163, 0.6984388211024688, -0.10780415180149255, 0.1292852031870324, 0.5416857616626258, -0.06563911615121981, -0.07867075595423068, 0.06517508355404522, 0.03615509384881577, 0.18901019285076504, -0.14200726375731815, 0.0769728141198302, 0.046073711020783004, 0.27538529218584884, 0.07383689297029417]

sol =  score(params)
for s in sol: print s






